@page
@using Kendo.Mvc.UI
@using ManagementService.ViewModels
@model IndexModel

@{
    ViewData["Title"] = "Home page";
}

@Html.AntiForgeryToken()
<h1 class="display-3 text-center">Welcome</h1>
<div class="border-top border-bottom" style="margin: 1rem 0">
    <h1 class="display-4 text-center">Users</h1>
</div>
<div class="border-top">
    @(Html.Kendo()
          .Grid<UserViewModel>()
          .Name("usersGrid")
          .Groupable()
          .Sortable()
          .Pageable()
          .Filterable()
          .Scrollable()
          .Resizable(builder => builder.Columns(true))
          .Reorderable(builder => builder.Columns(true))
          .Editable(editable => editable.Mode(GridEditMode.InLine))
          .ToolBar(tools => tools.Create())
          .Columns(columns =>
          {
              columns.Bound(p => p.UserId).Title("UserId").Width(50).Filterable(false);
              columns.Bound(p => p.Email).Title("Email").Width(100);
              columns.Bound(p => p.Password).Title("Password").Width(100);
              columns.Bound(p => p.FirstName).Title("First Name").Width(100);
              columns.Bound(p => p.LastName).Title("Last Name").Width(100);
              columns.Bound(p => p.Permissions).Title("Permissions").Width(100);
              columns.Command(command => { command.Edit(); command.Destroy(); }).Width(100);
          })
          .DataSource(dataSource => dataSource
              .Ajax()
              .Model(model =>
              {
                  model.Id(p => p.UserId);
                  model.Field(p => p.UserId).Editable(false);
                  model.Field(p => p.Permissions).Editable(false);
              })
              .Read(r => r.Url("/Index?handler=ReadUser").Data("forgeryToken"))
              .Update(u => u.Url("/Index?handler=UpdateUser").Data("forgeryToken"))
              .Create(c => c.Url("/Index?handler=CreateUser").Data("forgeryToken"))
              .Destroy(d => d.Url("/Index?handler=DestroyUser").Data("forgeryToken"))
              .PageSize(10)
              .Events(events => events.Error("error_handler"))
          )
    )
</div>
<div class="border-top border-bottom" style="margin: 1rem 0">
    <h1 class="display-4 text-center">Permissions</h1>
</div>
<div>    
    @(Html.Kendo()
          .Grid<PermissionViewModel>()
          .Name("permissionsGrid")
          .Groupable()
          .Sortable()
          .Pageable()
          .Filterable()
          .Scrollable()
          .Resizable(builder => builder.Columns(true))
          .Reorderable(builder => builder.Columns(true))
          .Editable(editable => editable.Mode(GridEditMode.InLine))
          .ToolBar(tools => tools.Create())
          .Columns(columns =>
          {
              columns.Bound(p => p.PermissionId).Title("PermissionId").Width(50).Filterable(false);
              columns.Bound(p => p.Name).Title("Name").Width(100);
              columns.Command(command => { command.Edit(); command.Destroy(); }).Width(100);
          })
          .DataSource(dataSource => dataSource
              .Ajax()
              .Model(model =>
              {
                  model.Id(p => p.PermissionId);
                  model.Field(p => p.PermissionId).Editable(false);
              })
              .Read(r => r.Url("/Index?handler=ReadPermission").Data("forgeryToken"))
              .Update(u => u.Url("/Index?handler=UpdatePermission").Data("forgeryToken"))
              .Create(c => c.Url("/Index?handler=CreatePermission").Data("forgeryToken"))
              .Destroy(d => d.Url("/Index?handler=DestroyPermission").Data("forgeryToken"))
              .PageSize(10)
              .Events(events => events.Error("error_handler"))
          )
    )
</div>
<div class="border-top border-bottom" style="margin: 1rem 0">
    <h1 class="display-4 text-center">Management Permissions</h1>
</div>
<div style="margin: 0 0 2rem 0">
    @(Html.Kendo()
          .Grid<ManagementViewModel>()
          .Name("managementGrid")
          .Groupable()
          .Sortable()
          .Pageable()
          .Filterable()
          .Scrollable()
          .Resizable(builder => builder.Columns(true))
          .Reorderable(builder => builder.Columns(true))
          .Editable(editable => editable.Mode(GridEditMode.InLine))
          .ToolBar(tools => { tools.Create().Text("ASSIGN"); tools.Save(); })
          .Columns(columns =>
          {
              columns.Bound(p => p.User).ClientTemplate("#=User.FullNameUser#").Width(100);
              columns.Bound(p => p.Permission).ClientTemplate("#=Permission.Name#").Width(100);
              columns.Command(command => { command.Destroy().Text("UNASSIGN"); }).Width(100);
          })
          .DataSource(dataSource => dataSource
              .Ajax()
              .Model(model =>
              {
                  model.Id(p => p.Id);
                  model.Field(p => p.User).DefaultValue(
                      ViewData["defaultUserDropDownList"] as UserViewModel);
                  model.Field(p => p.Permission).DefaultValue(
                      ViewData["defaultPermissionDropDownList"] as PermissionViewModel);
              })
              .Read(r => r.Url("/Index?handler=ReadManagement").Data("forgeryToken"))
              .Create(r => r.Url("/Index?handler=CreateManagement").Data("forgeryToken"))
              .Destroy(r => r.Url("/Index?handler=DestroyManagement").Data("forgeryToken"))
              .PageSize(10)
              .Events(events => events.Error("error_handler"))
          )
    )
</div>

<script>
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    function forgeryToken() {
        return kendo.antiForgeryTokens();
    }
</script>